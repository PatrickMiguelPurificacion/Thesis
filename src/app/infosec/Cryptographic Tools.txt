Cryptographic Tools 

The ability to conceal the contents of sensitive messages and to verify the contents of messages and the identities of their senders have the potential to be useful in all areas of business. To be actually useful, these cryptographic capabilities must be embodied in tools that allow IT and information security practitioners to apply the elements of cryptography in the everyday world of computing. This section covers a number of the more widely used tools that bring the functions of cryptography to the world of information systems.

Public-Key Infrastructure (PKI)
Public-key Infrastructure (PKI) is an integrated system of software, encryption methodologies, protocols, legal agreements, and third-party services that enables users to communicate securely. PKI systems are based on public-key cryptosystems and include digital certificates and certificate authorities (CAs).

Digital certificates are public-key container files that allow computer programs to validate the key and identify to whom it belongs. (More information about digital certificates appears in later sections of this chapter.) PKI and the digital certificate registries they contain enable the protection of information assets by making verifiable digital certificates readily available to business applications. This, in turn, allows the applications to implement several of the key characteristics of information security and to integrate these characteristics into business processes across an organization. These processes include the following:

• Authentication: Individuals, organizations, and Web servers can validate the identity of each of the parties in an Internet transaction.
Integrity: Content signed by the certificate is known to not have been altered while in transit from host to host or server to client.
• Privacy: Information is protected from being intercepted during transmission.
• Authorization: The validated identity of users and programs can enable authorization rules that remain in place for the duration of a transaction; this reduces some of the overhead and allows for more control of access privileges for specific transactions. Nonrepudiation: Customers or partners can be held accountable for transactions, such as online purchases, which they cannot later dispute.

A typical PKI solution protects the transmission and reception of secure information by integrating the following components:

• A certificate authority (CA), which issues, manages, authenticates, signs, and revokes users' digital certificates, which typically contain the user name, public key, and other identifying information.
• A registration authority (RA), which operates under the trusted collaboration of the certificate authority and can handle day-to-day certification functions, such as verifying registration information, generating end-user keys, revoking certificates, and vali- dating user certificates.
• Certificate directories, which are central locations for certificate storage that provide a single access point for administration and distribution.
• Management protocols, which organize and manage the communications among CAS, RAs, and end users. This includes the functions and procedures for setting up new users, issuing keys, recovering keys, updating keys, revoking keys, and enabling the transfer of certificates and status information among the parties involved in the PKP's area of authority. • Policies and procedures, which assist an organization in the application and management of certificates, in the formalization of legal liabilities and limitations, and in actual business use.

Common implementations of PKI include systems that issue digital certificates to users and servers; directory enrollment; key issuing systems; tools for managing the key issuance; and verification and return of certificates. These systems enable organizations to apply an enterprise-wide solution that provides users within the PKI's area of authority the means to engage in authenticated and secure communications and transactions.

The CA performs many housekeeping activities regarding the use of keys and certificates that are issues and used in its zone of authority. Each user authenticates himself or herself with the CA, and the CA can issue new or replacement keys, track issued keys, provide a directory of public key values for all known users, and perform other management activities. When a private key is compromised, or when the user loses the privilege of using keys in the area of authority, the CA can revoke the user's keys. The CA periodically distributes a certificate revocation list (CRL) to all users. When important events occur, specific applications can make a real-time request to the CA to verify any user against the current CRL.

The issuance of certificates (and the keys inside of them) by the CA enables secure, encrypted, nonrepudiable e-business transactions. Some applications allow users to generate their own certificates (and the keys inside of them), but a key pair generated by the end user can only provide nonrepudiation and not reliable encryption. A central system operated by a CA or RA can generate cryptographically strong keys that are considered by all users to be independently trustworthy, and can provide services for users such as private key backup, key recovery, and key revocation. 

The strength of a cryptosystem relies on both the raw strength of its key's complexity and the overall quality of its key management security processes. PKI solutions can provide several mechanisms for limiting access and possible exposure of the private keys. These mechanisms include password protection, smart cards, hardware tokens, and other hardware-based key storage devices that are memory-capable (like flash memory or PC memory cards). PKI users should select the key security mechanisms that provide a level of key protection appropriate to their needs. Managing the security and integrity of the private keys used for nonrepudiation or the encryption of data files is critical to the successful use of encryption and nonrepudiation services within the PKI's area of trust.

Digital Signatures
Digital signatures were created in response to the rising need to verify information transferred via electronic systems. Asymmetric encryption processes are used to create digital signatures. When an asymmetric cryptographic process uses the sender's private key to encrypt a message, the sender's public key must be used to decrypt the message. When the decryption is successful, the process verifies that the message was sent by the sender and thus cannot be refuted. This process is known as nonrepudiation and is the principle of cryptography that underpins the authentication mechanism collectively known as a digital signature. Digital signatures are, therefore, encrypted messages that can be mathematically proven authentic. 

The management of digital signatures is built into most Web browsers. The Internet Explorer digital signature management screen is shown in Figure 8-7. In general, digital signatures should be created using processes and products that are based on the Digital Signature Standard (DSS). When processes and products are certified as DSS compliant, they have been approved and endorsed by U.S. federal and state governments, as well as by many foreign governments, as a means of authenticating the author of an electronic document. NIST has approved a number of algorithms that can be used to generate and verify digital signatures.

These algorithms can be used in conjunction with the sender's public and private keys, the receiver's public key, and the Secure Hash Standard (described earlier in this chapter) to quickly create messages that are both encrypted and nonrepudiable. This process first creates a message digest using the hash algorithm, which is then input into the digital signature algorithm along with a random number to generate the digital signature. The digital signature function also depends upon the sender's private key and other information provided by the CA. The resulting encrypted message contains the digital signature, which can be verified by the recipient using the sender's public key.


Digital Certificates
As you learned earlier in this chapter, a digital certificate is an electronic document or container file that contains a key value and identifying information about the entity that controls the key. The certificate is often issued and certified by a third party, usually a certificate authority. A digital signature attached to the certificate's container file certifies the file's origin and integrity. This verification process often occurs when you download or update software via the Internet. The window in Figure 8-8 shows, for example, that the downloaded files do in fact come from the purported originating agency, Amazon.com, and thus can be trusted. Unlike digital signatures, which help authenticate the origin of a message, digital certificates authenticate the cryptographic key that is embedded in the certificate. When used properly these certificates enable diligent users to verify the authenticity of any organization's certificates. This is much like what happens when the Federal Deposit Insurance Corporation issues its FDIC logo to banks to assure customers that their bank is authentic. Different client-server applications use different types of digital certificates to accomplish their assigned functions, as follows:

• The CA application suite issues and uses certificates (keys) that identify and establish a trust relationship with a CA to determine what additional certificates (keys) can be authenticated.
• Mail applications use Secure/Multipurpose Internet Mail Extension (S/MIME) certificates for signing and encrypting e-mail as well as for signing forms.
• Development applications use object-signing certificates to identify signers of object- oriented code and scripts.
• Web servers and Web application servers use Secure Sockets Layer (SSL) certificates to authenticate servers via the SSL protocol (which is described shortly) in order to establish an encrypted SSL session.
• Web clients use client SSL certificates to authenticate users, sign forms, and participate in single sign-on solutions via SSL.
Two popular certificate types are those created using Pretty Good Privacy (PGP) and those created using applications that conform to International Telecommunication Union's (ITU-T) X.509 version 3. The X.509 v3 certificate, whose structure is outlined in Table 8-8, is an ITU-T recommendation that essentially defines a directory service that maintains a database (also known as a repository) of information about a group of users holding X.509 v3 certificates. An X.509 v3 certificate binds a distinguished name (DN), which uniquely identifies a certificate entity, to a user's public key. The certificate is signed and placed in the directory by the CA for retrieval and verification by the user's associated public key. The X.509 v3 standard's recommendation does not specify an encryption algorithm, though RSA, with its hashed digital signature, is typically used.

Hybrid Cryptography Systems
Except in digital certificates, asymmetric key encryption in its pure form is not widely used, but it is often used in conjunction with symmetric key encryption—thus, as part of a hybrid encryption system. The most common hybrid system is based on the Diffie-Hellman key exchange, which is a method for exchanging private keys using public key encryption. Diffie-Hellman key exchange uses asymmetric encryption to exchange session keys. These are limited-use symmetric keys for temporary communications; they allow two entities to con- duct quick, efficient, secure communications based on symmetric encryption, which is more efficient than asymmetric encryption for sending messages. Diffie-Hellman provides the foundation for subsequent developments in public key encryption. It protects data from exposure to third parties, which is sometimes a problem when keys are exchanged out-of-band. A hybrid encryption approach is illustrated in Figure 8-9, and it works as follows: Alex at XYZ Corp. wants to communicate with Rachel at ABC Corp., so Alex first creates a session key. Alex encrypts a message with this session key, and then gets Rachel's public key. Alex uses Rachel's public key to encrypt both the session key and the message, which is already encrypted. Alex transmits the entire package to Rachel, who uses her private key to decrypt the package containing the session key and the encrypted message, and then uses the session key to decrypt the message. Rachel can then continue to use only this session key for electronic communications until the session key expires. The asymmetric session key is used in the much more efficient symmetric encryption and decryption processes. After the session key expires (usually in just a few minutes), a new session key is chosen and shared using the same process.

Steganography
The word steganography—the art of secret writing—is derived from the Greek words steganos, meaning "covered" and graphein, meaning "to write." The Greek historian Herodotus described one of the first steganographers, a fellow Greek who sent a message to warn of an imminent invasion by writing it on the wood beneath a wax writing tablet.12 While steganography is technically not a form of cryptography, it is another way of protecting the confidentiality of information in transit. The most popular modern version of steganography involves hiding information within files that contain digital pictures or other images.

To understand how this form of steganography works, you must first know a little about how images are stored. Most computer graphics standards use a combination of three color values-red, blue, and green (RGB)—to represent a picture element, or pixel. Each of the three color values usually requires an 8-bit code for that color's intensity (e.g., 00000000 for no red and 11111111 for maximum red). Each color image pixel requires 3 colors x 8 bits = 24 bits to represent the color mix and intensity. (Some image encoding standards use more or fewer bits per pixel.) When a picture is created (by a digital camera or a computer program), the number of horizontal and vertical pixels captured and recorded is known as the image's resolution. Thus, for example, if 1024 horizontal pixels are recorded and 768 vertical pixels are captured, the image has a 1024 × 768 resolution and is said to have 786,432 pixels or three-quarters of a megapixel. Thus, an image that is 1024 x 768 pixels contains 786,432 groups of 24 bits to represent the red, green, and blue data. The raw image size can be calculated as 1024 x 768 × 24, or 5.66 megabytes. There are plenty of bits in this picture data file in which to hide a secret message.

To the naked eye, there is no discernable difference between a pixel with a red intensity of 00101001 and another slightly different pixel with a red intensity level of 00101000. This provides the steganographer with one bit per color (or three bits per pixel) to use for encoding data into an image file. If a steganographic process uses three bits per pixel for all 786,432 pixels, it will be able to store 236 kilobytes of hidden data within the uncompressed image. 

Some steganographic tools can calculate the maximum size image that can be stored before being detectable. Messages can also be hidden in non-image computer files that do not utilize all of their available bits by placing the data in places where software ignores it and humans almost never look. Some applications can hide messages in .bmp, .wav, .mp3, and .au files, as well as in otherwise unused storage space on CDs and DVDs. One program can take a text or document file and hide a message in the unused whitespace.

Even before the attacks of September 11, 2001, U.S. federal agencies came to believe that terrorist organizations were "hiding maps and photographs of terrorist targets and posting instructions for terrorist activities in sports chat rooms, pornographic bulletin boards, and other Web sites" by means of steganographic methods. No documented proof of this activity has been made public.13 However, the Electronic Frontier Foundation (www.eff.org) established that the U.S. Secret Service worked with several color laser printer manufacturers to use steganography to encode printer serial numbers in printed documents.


