Protocols for Secure Communications

Much of the software currently used to protect the confidentiality of information are not true cryptosystems. Instead, they are applications to which cryptographic protocols have been added. This is perhaps particularly true of Internet protocols; some experts claim that the Internet and its corresponding protocols were designed without any consideration for security, which was added later as an afterthought. Whether or not this is true, the lack of threats in the environment in which it was launched allowed the Internet to grow rapidly. But as the number of threats grew, so did the need for additional security measures.

Securing Internet Communication with S-HTTP and SSL
S-HTTP (Secure Hypertext Transfer Protocol) and SSL (Secure Sockets Layer) are two proto- cols designed to enable secure network communications across the Internet. S-HTTP and SSL ensure Internet security via different mechanisms and can be used independently or together. Netscape developed the Secure Sockets Layer (SSL) protocol to use public key encryption to secure a channel over the Internet, thus enabling secure communications. Most popular browsers, including Internet Explorer, use SSL. In addition to providing data encryption, integrity, and server authentication, SSL can, when properly configured, provide client authentication.

The SSL protocol works as follows: during a normal client/server HTTP session, the client requests access to a portion of the Web site that requires secure communications, and the server sends a message to the client indicating that a secure connection must be established. The client sends its public key and security parameters. This handshaking phase is complete when the server finds a public key match and sends a digital certificate to the client in order to authenticate itself. Once the client verifies that the certificate is valid and trustworthy, the SSL session is established. Until the client or the server terminates the session, any amount of data can be transmitted securely.

SSL provides two protocol layers within the TCP framework: SSL Record Protocol and Standard HTTP. The SSL Record Protocol is responsible for the fragmentation, compression, encryption, and attachment of an SSL header to the plaintext prior to transmission. Received encrypted messages are decrypted and reassembled for presentation to the higher levels of the protocol. The SSL Record Protocol provides basic security and communication services to the top levels of the SSL protocol stack. Standard HTTP provides the Internet communication services between client and host without consideration for encryption of the data that is transmitted between client and server.

Secure HTTP (S-HTTP) is an extended version of Hypertext Transfer Protocol that provides for the encryption of individual messages transmitted via the Internet between a client and server. S-HTTP is the application of SSL over HTTP, which allows the encryption of all information passing between two computers through a protected and secure virtual connection. Unlike SSL, in which a secure channel is established for the duration of a session, S-HTTP is designed for sending individual messages over the Internet and therefore a session for each individual exchange of data must be established. To establish a session, the client and server must have compatible cryptosystems and agree on the configuration. The S-HTTP client then must send the server its public key so that the server can generate a session key. The session key from the server is then encrypted with the client's public key and returned to the client. The client decrypts the key using its private key, and the client and server now possess identical session keys, which they can use to encrypt the messages sent between them.

S-HTTP can provide confidentiality, authentication, and data integrity through a variety of trust models and cryptographic algorithms. In addition, this protocol is designed for easy integration with existing HTTP applications and for implementation in conjunction with HTTP.

Securing E-mail with S/MIME, PEM, and PGP
A number of cryptosystems have been adapted to work with the dominant e-mail protocols in an attempt to incorporate some degree of security into this notoriously insecure communication medium. Some of the more popular adaptations included Secure Multipurpose Internet Mail Extensions, Privacy Enhanced Mail (PEM), and Pretty Good Privacy (PGP).

Secure Multipurpose Internet Mail Extensions (S/MIME) builds on the encoding format of the Multipurpose Internet Mail Extensions (MIME) protocol and uses digital signatures based on public key cryptosystems to secure e-mail. Privacy Enhanced Mail (PEM) was pro- posed by the Internet Engineering Task Force (IETF) and is a standard that uses 3DES symmetric key encryption and RSA for key exchanges and digital signatures. Pretty Good Privacy (PGP) was developed by Phil Zimmermann and uses the IDEA cipher for message encoding. PGP also uses RSA for symmetric key exchange and digital signatures. PGP is dis- cussed in more detail in a later section in this chapter.

Header Field			Function
MIME-version			States conformity to RFCs 2045 and 2046
Content-ID			Identifies MIME entities
Content-type			Describes data in body of message
Content-description		Describes body object
Content-transfer-encoding	Identifies type of conversion used in message body

Table 8-9 MIME Message Header Fields14

Function				Algorithm
Hash code for digital signatures	Secure Hash Algorithm 1 (SHA-1)	
Digital signatures			DSS
Encryption session keys			ElGamal (variant of Diffie-Hellman)
Digital signatures and session keys	RSA
Message encryption			3DES, RC2

Table 8-10 S/MIME Functions and Algorithms
﻿

The first commonly used Internet e-mail standard was SMTP/RFC 822, also called SMTP, but this standard has problems and limitations, such as an inability to transmit executable files or binary objects and an inability to handle character sets other than 7-bit ASCII. These limitations make SMTP unwieldy for organizations that need greater security and support for international character sets. MIME, the Multipurpose Internet Mail Extension, whose message header fields are shown in Table 8-9, was developed to address the problems associated with SMTP. In Table 8-9, you can see that MIME's message header fields were designed to identify and describe the e-mail message and to handle a variety of e-mail content. In addition to the message header fields, the MIME specification includes predefined content types and conversion transfer encodings, such as 7-bit, 8-bit, binary, and radix-64, which it uses to deliver e-mail messages reliably across a wide range of systems.

S/MIME, an extension to MIME, is the second generation of enhancements to the SMTP standard. MIME and S/MIME have the same message header fields, except for those added to support new functionality. Like MIME, S/MIME uses a canonical form format, which allows it to standardize message content type among systems, but it has the additional ability to sign, encrypt, and decrypt messages. Table 8-10 summarizes the functions and algorithms used by S/MIME. It should be mentioned that PGP is functionally similar to S/MIME, incorporates some of the same algorithms, and can, to some degree, interoperate with S/MIME.

Securing Web Transactions with SET, SSL, and S-HTTP
Just as PGP, PEM, and S/MIME work to secure e-mail operations, a number of related protocols work to secure Web browsers, especially at electronic commerce sites. Among these are Secure Electronic Transactions (SET), Secure Sockets Layer (SSL), Secure Hypertext Transfer Protocol (S-HTTP), Secure Shell (SSH-2), and IP Security (IPSec). You learned about SSL and S-HTTP earlier in this chapter.

Secure Electronic Transactions (SET) was developed by MasterCard and VISA in 1997 to protect against electronic payment fraud. SET uses DES to encrypt credit card information transfers and RSA for key exchange. SET provides security for both Internet-based credit card transactions and credit card swipe systems in retail stores. Secure Sockets Layer, as you learned earlier in this chapter, also provides secure online electronic commerce transactions. SSL uses a number of algorithms, but mainly relies on RSA for key transfer and IDEA, DES, or 3DES for encrypted symmetric key-based data transfer. Figure 8-8, shown earlier, illustrates the kind of certificate and SSL information that is displayed when you are checking out of an e-commerce site. If your Web connection does not automatically display such certificates, you can right-click in your browser's window and select Properties to view the connection encryption and certificate properties.

Securing Wireless Networks with WEP and WPA
Wireless local area networks (also known by the brand name Wi-Fi, or wireless fidelity net- works) are thought by many in the IT industry to be inherently insecure. The communication channel between the wireless network interface of any computing device and the access point that provides its services uses radio transmissions. Without some form of protection, these signals can be intercepted by anyone with a wireless packet sniffer. In order to prevent interception of these communications, these networks must use some form of cryptographic security control. Two sets of protocols are currently widely used to help secure wireless trans- missions: Wired Equivalent Privacy and Wi-Fi Protected Access. Both are designed for use with the IEEE 802.11 wireless networks.

Wired Equivalent Privacy (WEP) WEP was an early attempt to provide security with the 802.11 network protocol. It is now considered too cryptographically weak to pro- vide any meaningful protection from eavesdropping, but for a time it did provide some mea- sure of security for low-sensitivity networks. WEP uses the RC4 cipher stream to encrypt each packet using a 64-bit key. This key is created using a 24-bit initialization vector and a 40-bit key value. The packets are formed using an XOR function to use the RC4 key value stream to encrypt the data packet. A 4-byte integrity check value (ICV) is calculated for each packet and then appended.15 According to many experts, WEP is too weak for use in most network settings because:

• Key management is not effective since most networks use a single shared secret key value for each node. Synchronizing key changes is a tedious process, and no key management is defined in the protocol, so keys are seldom changed.

• The initialization vector (IV) is too small, resulting in the recycling of IVs. An attacker can reverse engineer the RC4 cipher stream and decrypt subsequent packets, or can forge future packets. In 2007, this was accomplished in less than one minute.

In summary, an intruder who collects enough data can threaten a WEP network in just a few minutes by decrypting or altering the data being transmitted, or by forging the WEP key to gain unauthorized access to the network. WEP also lacks a means of validating user creden- tials to ensure that only those who should be on the network are allowed to access it."


Wi-Fi Protected Access (WPA and WPA2) WPA was created to resolve the issues with WEP, WPA has a key size of 128 bits, and instead of static, seldom-changed keys it uses dynamic keys created and shared by an authentication server. WPA accomplishes this through the use of the Temporal Key Integrity Protocol (TKIP).

TKIP is a suite of algorithms that attempts to deliver the best security that can be obtained given the constraints of the wireless network environment. The algorithms are designed to work with legacy networking devices. TKIP adds four new algorithms in addition to those that were used in WEP:

• A cryptographic message integrity code, or MIC, called Michael, to defeat forgeries 
• A new IV sequencing discipline, to remove replay attacks from the attacker's arsenal 
• A per-packet key mixing function, to de-correlate the public IVs from weak keys 
• A rekeying mechanism, to provide fresh encryption and integrity keys, undoing the threat of attacks stemming from key reuse.

While it offered dramatically improved security over WEP, WPA was not the most secure wire- less protocol design. Some compromises were made in the security design to allow compatibility with existing wireless network components. Protocols to replace TKIP are currently under development. Table 8-11 provides a summary of the differences between WEP and WPA.

In 2004, WPA2 was made available as a replacement for WPA, WPA2 provided many of the elements missing from WPA, most notably AES-based encryption. Beginning in 2006, WPA2 became mandatory for all new Wi-Fi devices. WPA2 is backwardly compatible with WPA, although some older network cards have difficulty using it.

Next Generation Wireless Protocols Robust Secure Networks (RSN), a protocol planned for deployment as a replacement for TKIP in WPA, uses the Advanced Encryption Standard (AES), along with 802.1x and EAP. RSN extends AES with the Counter Mode CBC MAC Protocol (CCMP). AES supports key lengths up to 256 bits, but is not compatible with older hardware. However, a specification called Transitional Security Network (TSN) allows RSN and WEP to coexist on the same wireless local area network (WLAN). Note, however, that a WLAN on which devices are still using WEP is not optimally secured.


		WEP 					WPA
Encryption 	Broken by scientists and hackers 	Overcomes all WEP shortcomings
		40-bit key 				128-bit key

		Static key—the same value is used by
		everyone on the network
							Dynamic keys. Each user is assigned a key
							per session with additional keys
							calculated for each packet

		Manual key distribution—each key is
		typed by hand into each device
							Automatic key distribution

Authentication 	Broken, used WEP key itself for
		authentication
							Improved user authentication, utilizing
							stronger 802.1X and EAP

Table 8-11 WEP Versus WPA


The RSN protocol functions as follows:
1. The wireless NIC sends a probe request.
2. The wireless access point sends a probe response with an RSN Information Exchange (IE) frame.
3. The wireless NIC requests authentication via one of the approved methods.
4. The wireless access point provides authentication for the wireless NIC.
5. The wireless NIC sends an association request with an RSN Information Exchange (IE) frame.
6. The wireless access point sends an association response.20

Bluetooth 
Bluetooth is a de facto industry standard for short-range wireless communications between devices. It is used to establish communications links between wireless tele- phones and headsets, between PDAs and desktop computers, and between laptops. It was established by Ericsson scientists, and soon involved Intel, Nokia, IBM, and Toshiba. Micro- soft, Lucent Technologies, and 3Com joined the industry group shortly after its inception. 

The Bluetooth wireless communications link can be exploited by anyone within the approximately 30 foot range, unless suitable security controls are implemented. It has been estimated that there will be almost a billion Bluetooth-enabled devices by the end of the decade. In discoverable mode-which allows other Bluetooth systems to detect and connect- devices can easily be accessed, much as a shared folder can on a networked computer. Even in non-discoverable mode, the device is susceptible to access by other devices that have connected with it in the past.21 By default Bluetooth does not authenticate connections; however, Bluetooth does implement some degree of security when devices access certain services such as dial-up accounts and local-area file transfers. Paired devices, usually a computer or a phone and a peripheral that a user plans to connect to it, require that the same passkey be entered on both devices. This key is used to generate a session key, which is used for all future communications. Unfortunately some attacks can get around this. If an attacker uses a device to simulate a Bluetooth access point, they can trick the device into connecting with it. The fake access point can capture and store all communications, including the passkey submission. 

In August 2005, one of the first attacks on Bluetooth-enabled smartphones occurred. At the Athletics World Championships in Helsinki, a virus called Cabir infected dozens of phones. It spread quickly, via a prompt requesting a question that many users accepted without thinking, thus downloading the virus, which only drained the phones' batteries but demonstrated such devices are not immune to this type of attack. A Finnish security firm, F-Secure, deployed staff to the event to assist in removing the virus.

The only way to secure Bluetooth-enabled devices is to incorporate a twofold approach: (1) turn off Bluetooth when you do not intend to use it and (2) do not accept an incoming communications pairing request unless you know who the requestor is.

Securing TCP/IP with IPSec and PGP
Internet Protocol Security (IPSec) is an open-source protocol framework for security development within the TCP/IP family of protocol standards. It is used to secure communications across IP-based networks such as LANs, WANs, and the Internet. The protocol is designed to protect data integrity, user confidentiality, and authenticity at the IP packet level. IPSec is the cryptographic authentication and encryption product of the IETF's IP Protocol Security Working Group. It is often described as the security system from IP version 6 (the future version of the TCP/IP protocol), retrofitted for use with IP version 4 (the current version). IPSec is defined in Request for Comments (RFC) 1825, 1826, and 1827 and is widely used to create virtual private networks (VPNs), which are described in Chapter 6. IPSec itself is actually an open framework. 

IPSec includes the IP Security protocol itself, which specifies the information to be added to an IP packet as well as how to encrypt packet data; and the Internet Key Exchange, which uses an asymmetric-based key exchange and negotiates the security associations. IPSec oper- ates in two modes: transport and tunnel. In transport mode only the IP data are encrypted, not the IP headers. This allows intermediate nodes to read the source and destination addresses. In tunnel mode the entire IP packet is encrypted and is then placed into the con- tent portion of another IP packet. This requires other systems at the beginning and end of the tunnel to act as proxies and to send and receive the encrypted packets. These systems then transmit the decrypted packets to their true destinations.

IPSec uses several different cryptosystems:
• Diffie-Hellman key exchange for deriving key material between peers on a public network
• Public key cryptography for signing the Diffie-Hellman exchanges to guarantee the identity of the two parties
• Bulk encryption algorithms, such as DES, for encrypting the data
• Digital certificates signed by a certificate authority to act as digital ID cards

Within IPSec, IP layer security is achieved by means of an application header protocol or an encapsulating security payload protocol. The application header (AH) protocol provides system-to-system authentication and data integrity verification, but does not provide secrecy for the content of a network communication. The encapsulating security payload (ESP) protocol provides secrecy for the contents of network communications as well as system-to-system authentication and data integrity verification. When two networked systems form an association that uses encryption and authentication keys, algorithms, and key lifetimes, they can implement either the AH or the ESP protocol, but not both. If the security functions of both the AH and ESP are required, multiple security associations must be bundled to provide the correct sequence through which the IP traffic must be processed to deliver the desired security features. 

The AH protocol is designed to provide data integrity and IP packet authentication. Although AH does not provide confidentiality protection, IP packets are protected from replay attacks and address spoofing as well as other types of cyberattacks against open networks. Figure 8-10 shows the packet format of the IPSec authentication header protocol. As shown in this diagram, the security parameter index (SPI) references the session key and algorithm used to protect the data being transported. Sequence numbers allow packets to arrive out of sequence for reassembly. The integrity check value (ICV) of the authentication data serves as a checksum to verify that the packet itself is unaltered. Whether used in IPv4 or IPv6, authentication secures the entire packet, excluding mutable fields in the new IP header. In tunnel mode, however, the entire inner IP packet is secured by the authentication header protocol. 

The encapsulating security payload protocol provides confidentiality services for IP packets across insecure networks. ESP can also provide the authentication services of AH. Figure 8-10 shows information on the ESP packet header. ESP in tunnel mode can be used to establish a virtual private network, assuring encryption and authentication between networks communicating via the Internet. In tunnel mode, the entire IP packet is encrypted with the attached ESP header. A new IP header is attached to the encrypted pay- load, providing the required routing information.


Next header: Identifies the next higher level protocol, such as TCP or ESP.
Payload length: Specifies the AH contents length. Reserved: For future use.
Security parameters index: Identifies the security association for this IP packet. 
Sequence number: Provides a monotonically increasing counter number for each packets sent. Allows the recipient to order the packets and provides protection against replay attacks. 
Authentication data: A variable-length (multiple of 32 bits) containing the ICV (integrity check value) for this packet.

﻿
Security parameters index: Identifies the security association for this IP packet. 
Sequence number: Provides a monotonically increasing counter number for each packet sent. Allows the recipient to order the packets and provides protection against replay attacks. 
Payload data: Contains the encrypted data of the IP packet.
Padding: Space for adding bytes if required by encryption algorithm; also helps conceal the actual payload size,
Pad length: Specifies how much of the payload is padding.
Next header: Identifies the next higher level protocol, such as TCP,
Authentication data: A variable-length (multiple of 32 bits) containing the ICV (integrity check value) for this packet.


An ESP header is inserted into the IP packet prior to the TCP header, and an ESP trailer is placed after the IPv4 packet. If authentication is desired, an ESP authentication data field is appended after the ESP trailer. The complete transport segment, in addition to the ESP trailer, is encrypted. In an IPv6 transmission, the ESP header is placed after the hop-by-hop and routing headers. Encryption under IPv6 covers the transport segment and the ESP trailer. Authentication in both IPv4 and IPv6 covers the ciphertext data plus the ESP header. IPSec ESP-compliant systems must support the implementation of the DES algorithm utilizing the CBC (cipher block chaining) mode, which incorporates the following encryption algorithms: Triple DES, IDEA, RC5, CAST, and Blowfish.

Pretty Good Privacy (PGP) is a hybrid cryptosystem that combines some of the best available cryptographic algorithms and has become the open-source de facto standard for encryption and authentication of e-mail and file storage applications. Both freeware and low-cost commercial versions of PGP are available for a wide variety of platforms. Table 8-12 lists the PGP functions.


PGP Suite of Security Solutions 
The PGP security solution provides six services:
authentication by digital signatures, message encryption, compression, e-mail compatibility, segmentation, and key management. 

As shown in Table 8-12, one of the algorithms used in the PGP public-key encryption is Secure Hash Algorithm 1 (SHA-1), which is used to compute hash values for calculating a 160-bit hash code based on the plaintext message. The hash code is then encrypted with DSS or RSA and appended to the original message. The recipient uses the sender’s public key to decrypt and recover the hash code. Using the same encryption algorithm, the recipient then generates a new hash code from the same message. If the two hash codes are identical, then the message and the sender are authentic.

A sender may also want the entire contents of the message protected from unauthorized view. 3DES, IDEA, or CAST, which are all standard algorithms, may be used to encrypt the message contents with a unique, randomly generated 128-bit session key. The session key is encrypted by RSA, using the recipient’s public key, and then appended to the message. The recipient uses his private key with RSA to decrypt and recover the session key. The recovered session key is used to decrypt the message. Authentication and message encryption can be used together by first digitally signing the message with a private key, encrypting the message with a unique session key, and then encrypting the session key with the intended recipient’s public key.


Function			Algorithm		 	Application
Public key encryption 		RSA/SHA-1 or DSS/SHA-1 		Digital signatures
Conventional encryption 	3DES, RSA, IDEA or CAST 	Message encryption
File management 		ZIP 				Compression

Table 8-12 PGP Functions


PGP uses the freeware ZIP algorithm to compress the message after it has been digitally signed but before it is encrypted. This saves space and generates a more secure encrypted document since a smaller file offers an attacker fewer chances to look for patterns in the data and fewer characters with which to perform frequency analysis. PGP also uses a process known as Radix-64, which encodes non-textual data and assures that encrypted data can be transferred using e-mail systems by maintaining the required 8-bit blocks of ASCII text. The format maps three octets of binary data into four ASCII characters and appends a cyclic redundancy check (CRC) to detect transmission errors. Because many Internet facilities impose restrictions on message size, PGP can automatically subdivide messages into a manageable stream size. This segmentation is performed after all other encryption and conversion functions have been processed. At the recipient end, PGP reassembles the segment’s message blocks prior to decompression and decryption.

PGP does not impose a rigid structure for public key management, but it can assign a level of trust within the confines of PGP, though it does not specify the actual degree of trust the user should place in any specific key. Trust can be addressed and assured by using the public key ring structure. In a public key ring structure, each specific set of public key credentials is associated with a key legitimacy field, a signature trust field, and an owner trust field. These
fields contain a trust-flag byte that identifies whether the credential is trusted in each of these three fields. In the event that the trust of a given credential has been broken, as when a key is compromised, the owner can issue a digitally signed key revocation certificate that updates the credential trust bytes when the credential is next verified.

